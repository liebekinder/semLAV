/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package experimentseswc;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
public class QueryParser implements QueryParserConstants {

  final public Query ParseSparql() throws ParseException {
  ArrayList<String> vs;
  ArrayList<BasicGraphPattern> ts;
  HashMap<String, String> ps;
  boolean d;
    ps = PrefixList();
    d = Select();
    vs = Variables();
    ts = Block();
          {if (true) return new Query(vs, ts, ps, d);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> Variables() throws ParseException {
   ArrayList<String> vs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      vs = VariablesList();
      {if (true) return vs;}
      break;
    case ALL:
      jj_consume_token(ALL);
      {if (true) return new ArrayList<String>();}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> VariablesList() throws ParseException {
  ArrayList<String> vlo;
  Token v;
    v = jj_consume_token(VARIABLE);
    vlo = VariablesListOpt();
      vlo.add(0, v.image);
      {if (true) return vlo;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> VariablesListOpt() throws ParseException {
  ArrayList<String> vl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      vl = VariablesList();
      {if (true) return vl;}
      break;
    default:
      jj_la1[1] = jj_gen;
      {if (true) return new ArrayList<String>();}
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<BasicGraphPattern> Block() throws ParseException {
  ArrayList<BasicGraphPattern> ts;
    jj_consume_token(WHERE);
    jj_consume_token(LKEY);
    ts = JoinBlock();
    jj_consume_token(RKEY);
      {if (true) return ts;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<BasicGraphPattern> JoinBlock() throws ParseException {
  ArrayList<BasicGraphPattern> jb;
  BasicGraphPattern bgp;
    bgp = BGP();
    jb = RestJoinBlock();
      jb.add(0, bgp);
      {if (true) return jb;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<BasicGraphPattern> RestJoinBlock() throws ParseException {
  ArrayList<BasicGraphPattern> jb;
  BasicGraphPattern bgp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POINT:
      jj_consume_token(POINT);
      bgp = BGP();
      jb = RestJoinBlock();
      jb.add(0, bgp);
      {if (true) return jb;}
      break;
    default:
      jj_la1[2] = jj_gen;
      {if (true) return new ArrayList<BasicGraphPattern>();}
    }
    throw new Error("Missing return statement in function");
  }

  final public BasicGraphPattern BGP() throws ParseException {
  Triple t;
  Filter f;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case URI:
    case ID:
      t = Triple();
      {if (true) return t;}
      break;
    case FILTER:
      jj_consume_token(FILTER);
      jj_consume_token(LPAR);
      e = Expression();
      jj_consume_token(RPAR);
      {if (true) return new Filter(e);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
Expression Expression():
{ Token op, c, v;
  Expression e0, e1; }
{
    e0=Expression() op=<OPERATOR> e1=Expression()
    { return new BinaryExpression(op.image, e0, e1); }
|
    c=<CONSTANT>
    { return new UnaryExpression(c.image); }
|
    v=<VARIABLE>
    { return new UnaryExpression(v.image); }
|
    expression LESS expression
|
    expression LESSEQ expression
|
    expression GREATER expression
|
    expression GREATEREQ expression
|
    expression NEQUALS expression 
} */
  final public Expression Expression() throws ParseException {
  String bop;
  Expression r;
    bop = BasicOperator();
    r = Rest();
        if (r==null) {
            {if (true) return new UnaryExpression(bop);}
        } else {
            ((BinaryExpression) r).left = new UnaryExpression(bop);
            {if (true) return r;}
        }
    throw new Error("Missing return statement in function");
  }

  final public BinaryExpression Rest() throws ParseException {
  Token op;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
      op = jj_consume_token(OPERATOR);
      e = Expression();
      {if (true) return new BinaryExpression(op.image, null, e);}
      break;
    default:
      jj_la1[4] = jj_gen;
      {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String BasicOperator() throws ParseException {
  Token c, v;
  String s;
  String[] u;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      c = jj_consume_token(CONSTANT);
      {if (true) return c.image;}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
      {if (true) return v.image;}
      break;
    case URI:
    case ID:
      u = Uri();
      s = u[0];
      if (u.length > 1) {
          s = s + ":" + u[1];
      }
      {if (true) return s;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Triple Triple() throws ParseException {
  String s;
  String p;
  String o;
    s = Subject();
    p = Predicate();
    o = Object();
      {if (true) return new Triple(s, p, o);}
    throw new Error("Missing return statement in function");
  }

  final public String Predicate() throws ParseException {
  String[] u;
  String p;
  Token v, a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case ID:
      u = Uri();
      p = u[0];
      if (u.length > 1) {
          p = p + ":" + u[1];
      }
      {if (true) return p;}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
      {if (true) return v.image;}
      break;
    case A:
      a = jj_consume_token(A);
      {if (true) return a.image;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Subject() throws ParseException {
  String[] u;
  String s;
  Token v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case ID:
      u = Uri();
      s = u[0];
      if (u.length > 1) {
          s = s + ":" + u[1];
      }
      {if (true) return s;}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
      {if (true) return v.image;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Object() throws ParseException {
  String[] u;
  String o;
  Token v, c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case ID:
      u = Uri();
      o = u[0];
      if (u.length > 1) {
          o = o + ":" + u[1];
      }
      {if (true) return o;}
      break;
    case VARIABLE:
      v = jj_consume_token(VARIABLE);
      {if (true) return v.image;}
      break;
    case CONSTANT:
      c = jj_consume_token(CONSTANT);
      {if (true) return c.image;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public HashMap<String, String> PrefixList() throws ParseException {
  String[] p;
  HashMap<String, String> pl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREFIX:
      p = Prefix();
      pl = PrefixList();
      pl.put(p[0], p[1]);
      {if (true) return pl;}
      break;
    default:
      jj_la1[9] = jj_gen;
      {if (true) return new HashMap<String, String>();}
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] Prefix() throws ParseException {
  String[] u;
    jj_consume_token(PREFIX);
    u = Uri();
      {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public String[] Uri() throws ParseException {
  String[] ps;
  String ur;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      n = jj_consume_token(ID);
      jj_consume_token(COLON);
      ur = UriRest();
      ps = new String[2];
      ps[0]=n.image;
      ps[1]=ur;
      {if (true) return ps;}
      break;
    case URI:
      n = jj_consume_token(URI);
      ps = new String[1];
      ps[0] = n.image;
      {if (true) return ps;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String UriRest() throws ParseException {
  Token v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      v = jj_consume_token(ID);
      {if (true) return v.image;}
      break;
    case URI:
      v = jj_consume_token(URI);
      {if (true) return v.image;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean Select() throws ParseException {
  boolean d;
    jj_consume_token(SELECT);
    d = Distinct();
      {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public boolean Distinct() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
      {if (true) return true;}
      break;
    default:
      jj_la1[12] = jj_gen;
      {if (true) return false;}
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x201000,0x1000,0x40000,0x901020,0x80000,0x901800,0xd01000,0x901000,0x901800,0x400,0x900000,0x900000,0x100,};
   }

  /** Constructor with InputStream. */
  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
